{"version":3,"file":"main.js","mappings":"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","sources":["webpack://g0/webpack/bootstrap","webpack://g0/webpack/runtime/define property getters","webpack://g0/webpack/runtime/hasOwnProperty shorthand","webpack://g0/webpack/runtime/make namespace object","webpack://g0/./src/utils.ts","webpack://g0/./src/bitmap.ts","webpack://g0/./src/engine.ts","webpack://g0/./src/ecs/simple.ecs.ts","webpack://g0/./src/components.ts","webpack://g0/./src/systems.ts","webpack://g0/./src/world.ts","webpack://g0/./src/stage.ts","webpack://g0/./src/data/runner_stages.ts","webpack://g0/./src/runnerGame.ts","webpack://g0/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Bitmap, TileableBitmap } from \"./bitmap\";\n\n// file loading helpers\nexport interface Image {\n  width: number;\n  height: number;\n  data: ArrayBuffer;\n}\nexport const fileHelpers = {\n  loadImage(src: string): Promise<Image> {\n    return new Promise((resolve, reject) => {\n      const image = new Image();\n      image.onload = () => {\n        const canvas = document.createElement(\"canvas\");\n        const context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n        const { width, height } = image;\n        canvas.width = width;\n        canvas.height = height;\n        context.drawImage(image, 0, 0);\n        const imageData = context.getImageData(0, 0, width, height);\n        return resolve({ width, height, data: imageData.data.buffer });\n      };\n      image.onerror = (err) => {\n        console.error(\"Error loading image:\", err);\n        reject(err);\n      };\n      image.src = src;\n    });\n  },\n  loadImageAsBitmap(src: string): Promise<Bitmap> {\n    return fileHelpers\n      .loadImage(src)\n      .then(img => Bitmap.from(img.data, img.width, img.height))\n      .catch(err => {\n        console.error(\"Error loading bitmap:\", src);\n        throw err;\n      });\n  },\n  loadImagesAsTileableBitmaps(...configs: Array<[\n    src: string,\n    width: number,\n    height: number,\n    cols: number,\n    rows: number,\n  ]>): Promise<TileableBitmap[]> {\n    return Promise.all(configs.map(([src, w, h, c, r]) => fileHelpers\n      .loadImage(src)\n      .then(img => TileableBitmap.from(img.data, w, h, c, r))\n      .catch(err => {\n        console.error(\"Error loading tileable bitmap:\", src, err);\n        return TileableBitmap.from(new ArrayBuffer(w * h), w, h, c, r);\n      }),\n    ));\n  },\n};\n\n// color helpers\nexport type hex = number;\nexport type abgr = [number, number, number, number];\nexport const colorHelpers = {\n  hex2abgr: (hex: hex): abgr => ([hex >>> 24 & 0xff, hex >>> 16 & 0xff, hex >>> 8 & 0xff, hex & 0xff]),\n  abgr2hex: ([a, b, g, r]: abgr) => ((a << 24) | (b << 16) | (g << 8) | r) >>> 0,\n  hexadjust: (hex: hex, [A, B, G, R]: abgr) => {\n    const [a, b, g, r] = colorHelpers.hex2abgr(hex);\n    return colorHelpers.abgr2hex([Math.min(a * A, 255), Math.min(b * B, 255), Math.min(g * G, 255), Math.min(r * R, 255)]);\n  },\n  calccoefs: (colora: abgr, colorb: abgr, K = 1) => {\n    const A = colora[0] == 0 ? 255 : colorb[0] / colora[0] * K;\n    const B = colora[1] == 0 ? 255 : colorb[1] / colora[1] * K;\n    const G = colora[2] == 0 ? 255 : colorb[2] / colora[2] * K;\n    const R = colora[3] == 0 ? 255 : colorb[3] / colora[3] * K;\n    return [A, B, G, R];\n  },\n  interpolate: (hexa: hex, hexb: hex, step: number) => {\n    const colora = colorHelpers.hex2abgr(hexa);\n    const colorb = colorHelpers.hex2abgr(hexb);\n    const a = colora[0] + (colorb[0] - colora[0]) * step | 0;\n    const b = colora[1] + (colorb[1] - colora[1]) * step | 0;\n    const g = colora[2] + (colorb[2] - colora[2]) * step | 0;\n    const r = colora[3] + (colorb[3] - colora[3]) * step | 0;\n    return colorHelpers.abgr2hex([a, b, g, r]);\n  }\n};\n\n// timeHelpers\nexport const timeHelpers = {\n  sleep(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  },\n  now(): number {\n    return performance.now();\n  }\n};\n\n// colision helpers\nexport enum CollisionSide {\n  None = \"none\",\n  Left = \"left\",\n  Right = \"right\",\n  Top = \"top\",\n  Bottom = \"bottom\",\n}\nexport const collisionHelpers = {\n  circle(\n    x0: number, y0: number, d0: number,\n    x1: number, y1: number, d1: number,\n  ): boolean {\n    const dist = Math.sqrt(\n      (x1 - x0) ** 2 + \n      (y1 - y0) ** 2\n    );\n    return dist <= (d0 + d1);\n  },\n  rectangle(\n    x0: number, y0: number,\n    r0: number, b0: number,\n    x1: number, y1: number,\n    r1: number, b1: number,\n  ): CollisionSide {\n    if (x0 > r1 || x1 > r0 || y0 > b1 || y1 > b0) return CollisionSide.None;\n    const dx = Math.min(r0 - x1, r1 - x0);\n    const dy = Math.min(b0 - y1, b1 - y0);\n    return dx < dy\n      ? x0 > x1 ? CollisionSide.Left : CollisionSide.Right\n      : y0 > y1 ? CollisionSide.Top : CollisionSide.Bottom;\n  },\n  bounds(\n    x0: number, y0: number,\n    r0: number, b0: number,\n    bl: number, bt: number,\n    br: number, bb: number,\n  ): CollisionSide {\n    if (y0 < bt) return CollisionSide.Top;\n    if (b0 > bb) return CollisionSide.Bottom;\n    if (x0 < bl) return CollisionSide.Left;\n    if (r0 > br) return CollisionSide.Right;\n    return CollisionSide.None;\n  },\n};\n\n// benchmark tools\nexport const benchmark = (name = \"default\", calcMiddleRate = 10, fixedDigit = 4) => {\n  let minimumtime = Infinity;\n  let maximumtime = 0;\n  let lasttime = 0;\n  let calcMiddleIter = calcMiddleRate;\n\n  const history = [];\n  const middles = [];\n\n  const A = () => lasttime = performance.now();\n\n  const B = () => {\n    const dt = performance.now() - lasttime;\n    if (dt <= 0 && dt >= Infinity) {\n      console.log(\"lol\", dt);\n      return;\n    }\n    calcMiddleIter--;\n    history.push(dt);\n    if (minimumtime > dt) minimumtime = dt;\n    if (maximumtime < dt) maximumtime = dt;\n    if (calcMiddleIter > 0) return;\n    calcMiddleIter = calcMiddleRate;\n    middles.push(middle(history));\n    clear();\n  }\n  const fps = (time: number) => 1 / (time * 0.001);\n  const clear = () => history.length = 0;\n  const middle = (arr: number[]) => arr.reduce((acc, v) => acc += v, 0) / arr.length;\n  const fixed = (num: number) => +num.toFixed(fixedDigit);\n  const filter = (num: number) => num > 0 && num < Infinity;\n\n  const resultsTime = () => ({\n    name,\n    min: fixed(minimumtime),\n    max: fixed(maximumtime),\n    middles: middles.filter(filter).map(fixed),\n  });\n\n  const resultsFps = () => ({\n    name,\n    maxFps: fixed(fps(minimumtime)),\n    minFps: fixed(fps(maximumtime)),\n    fps: fixed(fps(middle(middles))),\n    middlesFps: middles.filter(filter).map(fps).map(fixed),\n  })\n\n  return { A, B, resultsTime, resultsFps };\n};\n\n","/* Bitmap */\nexport class Bitmap {\n  readonly width: number;\n  readonly height: number;\n  protected data: Uint32Array;\n\n  /** Create new Bitmap with empty pixels\n  * @param width new Bitmap width\n  * @param height new Bitmap height */\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n    this.data = new Uint32Array(width * height);\n  }\n\n  /** Create Bitmap from buffer\n  * @param buffer buffer with color values\n  * @param width new Bitmap width\n  * @param height new Bitmap height\n  * @returns new Bitmap */\n  public static from(buffer: ArrayBuffer, width: number, height: number): Bitmap {\n    const bitmap = new Bitmap(width, height);\n    bitmap.data = new Uint32Array(buffer);\n    return bitmap;\n  }\n\n  /** Get pixels array\n  * @returns Uint32Array which represents pixels */\n  public get pixels(): Uint32Array {\n    return this.data;\n  }\n\n  /** Draw Bitmap on self\n  * @param bitmap source Bitmap to draw\n  * @param x destination offset x\n  * @param y destination offset y\n  * @returns self */\n  public draw(bitmap: Bitmap, x: number, y: number): this {\n    const { data: dest, width: dw, height: dh } = this;\n    const { data: src,  width: sw } = bitmap;\n    let i = src.length;\n    while (i--) {\n      if (src[i] === 0) continue;\n      const px = x + (i % sw);\n      const py = y + (i / sw | 0);\n      if (px < 0 || px >= dw || py < 0 || py >= dh) continue;\n      dest[px + py * dw] = src[i];\n    }\n    return this;\n  }\n\n  /** Copy to Bitmap area of self\n  * @param bitmap destination Bitmap\n  * @param x destination offset x\n  * @param y destination offset y\n  * @param sx source offset x\n  * @param sy source offset y\n  * @param width area width to copy\n  * @param height area height to copy\n  * @returns self */\n  public copy(bitmap: Bitmap, x: number, y: number, sx: number, sy: number, width: number, height: number): this {\n    const { data: dest, width: dw, height: dh } = bitmap;\n    const { data: src,  width: sw } = this;\n    let i = width * height;\n    while (i--) {\n      const j = (sx + i % width) + (sy + (i / width | 0)) * sw;\n      if (src[j] == 0) continue;\n      const px = x + (i % width);\n      const py = y + (i / width | 0);\n      if (px < 0 || px >= dw || py < 0 || py >= dh) continue;\n      dest[px + py * dw] = src[j];\n    }\n    return this;\n  }\n\n  /** Extract pixels to new Bitmap\n  * @param x source offset x\n  * @param y source offset y\n  * @param width new Bitmap width\n  * @param height new Bitam height\n  * @returns new Bitmap */\n  public extract(x: number, y: number, width: number, height: number): Bitmap {\n    const bitmap = new Bitmap(width, height);\n    const { data: src,  width: sw, height: sh } = this;\n    const { data: dest, width: dw } = bitmap;\n    let i = dest.length;\n    while (i--) {\n      const px = x + (i % dw);\n      const py = y + (i / dw | 0);\n      if (px < 0 || px >= sw || py < 0 || py >= sh) continue;\n      dest[i] = src[px + py * sw];\n    }\n    return bitmap;\n  }\n\n  /** Clone self to new Bitmap\n  * @returns new Bitmap */\n  public clone(): Bitmap {\n    const bitmap = new Bitmap(this.width, this.height);\n    const { data: dest } = bitmap;\n    const { data: src } = this;\n    let i = dest.length;\n    while (i--) dest[i] = src[i];\n    return bitmap;\n  }\n\n  /** Fill self with color\n  * @param color color to fill\n  * @returns self */\n  public fill(color: number): this {\n    this.data.fill(color);\n    return this;\n  }\n\n  /** Vertical flip\n  * @returns self */\n  public flipV(): this {\n    const { data, width } = this;\n    let i = data.length;\n    while (i--) {\n      const px = width - (i % width) - 1;\n      if (px >=  width / 2) continue;\n      const py = i / width | 0;\n      const pi = px + py * width;\n      const temp = data[i];\n      data[i] = data[pi];\n      data[pi] = temp;\n    }\n    return this;\n  }\n\n  /** Horizontal flip\n  * @returns self */\n  public flipH(): this {\n    const { data, width, height } = this;\n    let i = data.length / 2;\n    while (i--) {\n      const px = i % width;\n      const py = height - (i / width | 0) - 1;\n      const pi = px + py * width;\n      const temp = data[i];\n      data[i] = data[pi];\n      data[pi] = temp;\n    }\n    return this;\n  }\n}\n\n/* TileableBitmap */\nexport class TileableBitmap extends Bitmap {\n  readonly twidth: number;\n  readonly theight: number;\n  readonly cols: number;\n  readonly rows: number;\n\n  /** Create new TileableBitmap with empty pixels\n  * @param twidth width of the tile\n  * @param theight height of the tile\n  * @param cols total number of tiles in horizontal\n  * @param rows total number of tiles in vertical */\n  constructor(twidth: number, theight: number, cols: number, rows: number) {\n    super(twidth * cols, theight * rows);\n    this.twidth = twidth;\n    this.theight = theight;\n    this.cols = cols;\n    this.rows = rows;\n  }\n\n  /** Create TileableBitmap from buffer\n  * @param buffer buffer with color values\n  * @param twidth width of the tile\n  * @param theight height of the tile\n  * @param cols total number of tiles in horizontal\n  * @param rows total number of tiles in vertical\n  * @returns new TileableBitmap */\n  public static from(buffer: ArrayBuffer, twidth: number, theight: number, cols: number = 1, rows: number = 1): TileableBitmap {\n    const tbitmap = new TileableBitmap(twidth, theight, cols, rows);\n    tbitmap.data = new Uint32Array(buffer);\n    return tbitmap;\n  }\n\n  /** Extract tile to new Bitmap\n  * @param col tile location by x\n  * @param row tile location by y\n  * @returns new Bitmap */\n  public extractTile(col: number, row: number): Bitmap {\n    return this.extract(\n      col * this.twidth,\n      row * this.theight,\n      this.twidth,\n      this.theight,\n    );\n  }\n\n  /** Copy to Bitmap one tile of self\n  * @param bitmap destination Bitmap\n  * @param x destination offset x\n  * @param y destination offset y\n  * @param col tile location by x\n  * @param row tile location by y\n  * @returns self */\n  public copyTile(bitmap: Bitmap, x: number, y: number, col: number, row: number): this {\n    return this.copy(\n      bitmap, x, y,\n      col * this.twidth,\n      row * this.theight,\n      this.twidth,\n      this.theight,\n    );\n  }\n\n  /** Split TileableBitmap to array of Bitmaps\n  * @returns array of Bitmaps */\n  public split(): Bitmap[] {\n    const bitmaps: Bitmap[] = [];\n    for (let row = 0; row < this.rows; row++) {\n      for (let col = 0; col < this.cols; col++) {\n        const x = col * this.twidth;\n        const y = row * this.theight;\n        bitmaps.push(this.extract(x, y, this.twidth, this.twidth));\n      }\n    }\n    return bitmaps;\n  }\n\n  /** Create new TileableBitmap by reordering tiles of self\n  * @param order indexes of source tiles by col * row\n  * @param cols total number of tiles in horizontal\n  * @param rows total number of tiles in vertical\n  * @returns new TileableBitmap */\n  public reorder(order: number[], cols: number, rows: number): TileableBitmap {\n    const { twidth, theight, cols: scols } = this;\n    const tbitmap = new TileableBitmap(twidth, theight, cols, rows);\n    let i = cols * rows;\n    while(i--) {\n      const j = order[i];\n      const [dc, dr] = [i % cols, i / cols | 0];\n      const [sc, sr] = [j % scols, j / scols | 0];\n      this.copyTile(tbitmap, dc * twidth, dr * theight, sc, sr);\n    }\n    return tbitmap;\n  }\n}\n\n/* BitmapPallete */\nexport class BitmapPallete {\n  private palleteData: Uint32Array;\n  readonly palleteMap: Uint8Array;\n  readonly bitmap: Bitmap;\n\n  /** Create new BitmapPallete attached to Bitmap\n  * @param bitmap source Bitmap */\n  constructor(bitmap: Bitmap) {\n    this.bitmap = bitmap;\n    const pixels = bitmap.pixels;\n    const map = [] as number[];\n    const colors = [] as number[];\n    let i = pixels.length;\n    while (i--) {\n      const pixel = pixels[i];\n      const idx = colors.indexOf(pixel);\n      if (idx < 0) {\n        map[i] = colors.length;\n        colors.push(pixel);\n      } else map[i] = idx;\n    }\n    this.palleteMap = new Uint8Array(map);\n    this.palleteData = new Uint32Array(colors);\n  }\n\n  /** Get pallete as array of numbers\n  * @returns colors */\n  public get colors(): number[] {\n    return Array.from(this.palleteData);\n  }\n\n  /** Set new pallete and apply on source Bitmap\n  * @param pallete new pallete to apply */\n  public set colors(pallete: number[]) {\n    const length = this.palleteData.length;\n    this.palleteData.set(pallete.slice(0, length));\n    this.remap();\n  }\n\n  /** Apply pallete on source Bitmap */\n  protected remap(): void {\n    const { \n      bitmap: { pixels },\n      palleteData,\n      palleteMap,\n    } = this;\n    let i = pixels.length;\n    while (i--) pixels[i] = palleteData[palleteMap[i]];\n  }\n}\n","import { timeHelpers } from \"./utils\";\nexport type EngineHandler = (dt: number, time: number) => void;\n\nexport class Engine {\n  protected timestamp: number = 0;\n  protected running: boolean = false;\n\n  constructor(\n    protected rate: number,\n    protected update: EngineHandler,\n    protected render: EngineHandler,\n    readonly deltaCoef: number = 0.05,\n  ) {}\n\n  start() {\n    if (this.running) return;\n    this.running = true;\n    this.tick();\n  }\n\n  stop() {\n    this.running = false;\n  }\n\n  isRunning() {\n    return this.running;\n  }\n\n  getTimestamp() {\n    return this.timestamp;\n  }\n\n  protected async tick() {\n    while (this.running) {\n      const now = timeHelpers.now();\n      const dt = (now - this.timestamp) * this.deltaCoef;\n      const time = now * this.deltaCoef;\n      this.timestamp = now;\n      await timeHelpers.sleep(this.rate);\n      this.update(dt, time)\n      this.render(dt, time)\n    }\n  }\n\n}\n\nexport class TimeoutEngine extends Engine {\n  protected async tick() {\n    if (!this.running) return;\n    const now = timeHelpers.now();\n    const dt = (now - this.timestamp) * this.deltaCoef;\n    const time = now * this.deltaCoef;\n    this.timestamp = now;\n    setTimeout(() => this.tick(), this.rate)\n    this.update(dt, time);\n    this.render(dt, time);\n  }\n}\n\nexport class WindowRafEngine extends Engine {\n  protected async tick() {\n    if (!this.running) return;\n    const step = (now: number) => {\n      const dt = (now - this.timestamp) * this.deltaCoef;\n      const time = now * this.deltaCoef;\n      this.timestamp = now;\n      this.update(dt, time)\n      this.render(dt, time)\n      window.requestAnimationFrame(step);\n    };\n    step(timeHelpers.now());\n  }\n}\n","export type Immutable<T> = { +readonly [K in keyof T]: T[K] };\nexport type Mutable<T> = { -readonly [K in keyof T]: T[K] };\n\nexport type ComponentList<T> = Record<string, Component<T>>;\n\n/* EntityManager */\nexport class EntityManager<C extends ComponentList<any>> {\n  private idx = 0;\n  /** Create new Entity Manager\n  * @param components components dictionary */\n  constructor(private components: C) {}\n\n  /** Add new entity with properties for components\n  * @param components components entity have\n  * @returns entity index */\n  add<K extends keyof C>(components: Record<K, typeof this.components[K][\"schema\"]>): number {\n    const entries = Object.entries(components);\n    for (const [componentName, component] of entries){\n      this.components[componentName].set(this.idx, component);\n    }\n    return this.idx++;\n  }\n\n  /** Assign new properties for components for entity\n  * @param idx entity index\n  * @param components new components values\n  * @returns entity index */\n  set<K extends keyof C>(idx: number, components: { [P in K]: C[P][\"schema\"] }): number {\n    const entries = Object.entries(this.components);\n    for (const [componentName, component] of entries) {\n      component.set(idx, components?.[componentName] || {});\n    }\n    return idx;\n  }\n\n  /** Build readonly object of all entity components\n  * @param idx entity index\n  * @returns readonly entity object */\n  get<K extends keyof C>(idx: number): Immutable<{ [P in K]: C[P][\"schema\"] }> {\n    const entries = Object.entries(this.components);\n    const result = {} as { [P in K]: C[P][\"schema\"] };\n    for (const [componentName, component] of entries){\n      result[componentName] = component.get(idx);\n    }\n    return result;\n  }\n\n  /** Reset Entity Manager and remove all entities data */\n  reset(): void {\n    const components = Object.values(this.components);\n    for (const component of components) component.reset();\n    this.idx = 0;\n  }\n}\n\n/* Component */\nexport type Storage<T> = { [K in keyof T]: T[K][] };\nexport class Component<T extends Object> {\n  readonly schema: Immutable<T>;\n  readonly storage: Immutable<Storage<T>>;\n  /** Create new Component\n  * @param schema Plain object with properties */\n  constructor(schema: T) {\n    this.schema = schema;\n    this.storage = Object.keys(schema).reduce(\n      (acc, key) => ({ ...acc, [key]: [] }),\n      {} as Storage<T>,\n    );\n  }\n\n  /** Build readonly object of Component element\n  * @param idx entity index\n  * @returns readonly Component object */\n  get(idx: number): Immutable<T> {\n    const { storage } = this;\n    const element = {} as T;\n    for (const prop in storage) element[prop] = storage[prop][idx];\n    return element;\n  }\n\n  /** Assign new values for Component element\n  * @param idx entity index\n  * @param data new values\n  * @returns entity index */\n  set(idx: number, data: T): number {\n    const { storage } = this;\n    for (const prop in storage) storage[prop][idx] = data[prop] || this.schema[prop];\n    return idx;\n  }\n\n  /** Reset Component storage */\n  reset(): void {\n    const { storage } = this;\n    for (const prop in storage) storage[prop].length = 0;\n  }\n}\n\n/* System */\nexport type SystemHandler<T> = (\n  dt: number,\n  components: T,\n  ...entities: number[][]\n) => void;\nexport type SystemCallback = (dt?: number) => void;\nexport class System<T extends Record<string, Component<any>>> {\n  /** Create new System\n  * @param components components to use in the System\n  * @param handler callback with access to components */\n  constructor(\n    readonly components: T,\n    private handler: SystemHandler<T>,\n  ) {}\n\n  /** Create callback to execute the System\n  * @param entityGroups array of entity groups assigned to the System\n  * @returns callback */\n  setup(...entityGroups: number[][]): SystemCallback {\n    return (dt) => this.handler(dt, this.components, ...entityGroups);\n  }\n}\n","import { Bitmap } from \"./bitmap\";\nimport { Component } from \"./ecs/simple.ecs\";\n\nconsole.debug(\"COMPONENTS: definitions\");\n\nexport const cPosition = new Component<{ x: number; y: number }>({\n  x: 0,\n  y: 0,\n});\n\nexport const cVelocity = new Component<{ vx: number; vy: number }>({\n  vx: 0,\n  vy: 0,\n});\n\nexport const cShape = new Component<{ w: number; h: number }>({\n  w: 0,\n  h: 0,\n});\n\nexport const cSprite = new Component<{\n  spriteIdx: number;\n  sprites: Bitmap[];\n  flipped?: boolean;\n  offsetX?: number,\n  offsetY?: number,\n}>({\n  spriteIdx: 0,\n  sprites: [],\n  flipped: false,\n  offsetX: 0,\n  offsetY: 0\n});\n\nexport const cAnimation = new Component<{\n  animations: number[][];\n  current: number;\n  length: number;\n  time: number;\n  coef: number;\n}>({\n  animations: [[]],\n  current: 0,\n  length: 0,\n  time: 0,\n  coef: 0,\n});\n\nexport const cInput = new Component<{ keys: Set<string> }>({\n  keys: new Set(),\n});\n\nexport const cInputRunner = new Component<{\n  actions: Set<String>,\n  jumping: boolean,\n  acceleration: number,\n}>({\n  actions: new Set(),\n  jumping: false,\n  acceleration: 0,\n});\n\nexport const cPlayer = new Component<{ air: boolean; speed: number; power: number }>({\n  air: false,\n  speed: 0,\n  power: 0,\n});\n\nexport const c2AnimatedBg = new Component<{\n}>({\n\n});\n\n// export const cWorld = new Component<{\n//   time?: number,\n//   width: number,\n//   height: number,\n//   gravity: number,\n//   friction: number,\n//   viewport: Bitmap,\n// }>({\n//   time: 0,\n//   width: 0,\n//   height: 0,\n//   gravity: 0,\n//   friction: 0,\n//   viewport: new Bitmap(0, 0),\n// });\n","import { System } from \"./ecs/simple.ecs\";\nimport { World } from \"./world\";\nimport { Bitmap } from \"./bitmap\";\nimport {\n  cPosition,\n  cVelocity,\n  cShape,\n  cSprite,\n  cAnimation,\n  cInput,\n  cInputRunner,\n  cPlayer,\n} from \"./components\";\nimport { collisionHelpers, CollisionSide } from \"./utils\";\n\nimport { debug } from \".\";\n\nconst { rectangle, bounds } = collisionHelpers;\n\nexport function Systems(world: World, viewport: Bitmap) {\n  console.debug(\"SYSYEMS: initialization\");\n\n  const { width, height } = world;\n  return {\n    /* Collide entities with world bounds */\n    sCollideBounds: new System(\n      { cPosition, cVelocity, cShape, cPlayer },\n      (_, comp, entities) => {\n        const { x, y } = comp.cPosition.storage;\n        const { vx, vy } = comp.cVelocity.storage;\n        const { w, h } = comp.cShape.storage;\n        const { air } = comp.cPlayer.storage;\n        for (const e of entities) {\n          const eRight = x[e] + w[e];\n          const eBottom = y[e] + h[e];\n          const collisionSide = bounds(\n            x[e], y[e], eRight, eBottom,\n            0, 0, width, height,\n          );\n          if (collisionSide == CollisionSide.None) continue;\n          switch (collisionSide) {\n            case CollisionSide.Bottom: x[e] = 32; y[e] = 32; break;\n            case CollisionSide.Left: vx[e] = 0; x[e] = 0; break;\n            case CollisionSide.Right: vx[e] = 0; x[e] = width - w[e]; break;\n            case CollisionSide.Top: vy[e] = 1; y[e] = 0; break;\n          }\n        }\n      },\n    ),\n\n    /* Collide entities from groupA with entities from groupB */\n    sCollideShapes: new System(\n      { cPosition, cVelocity, cShape, cPlayer },\n      (_, comp, entities, blocks) => {\n        const { x, y } = comp.cPosition.storage;\n        const { vx, vy } = comp.cVelocity.storage;\n        const { w, h } = comp.cShape.storage;\n        const { air } = comp.cPlayer.storage;\n        for (const e of entities) {\n          const eRight = x[e] + w[e];\n          const eBottom = y[e] + h[e];\n          let totalCollisions = 0;\n          for (const b of blocks) {\n            if (totalCollisions > 2) break;\n            const bRight = x[b] + w[b];\n            const bBottom = y[b] + h[b];\n            const collisionSide = rectangle(\n              x[e], y[e], eRight, eBottom,\n              x[b], y[b], bRight, bBottom,\n            );\n            if (collisionSide === CollisionSide.None) continue;\n            totalCollisions++;\n            switch (collisionSide) {\n              case CollisionSide.Bottom: vy[e] = 0; y[e] = y[b] - h[e]; air[e] = false; break;\n              case CollisionSide.Right: vx[e] = 0; x[e] = x[b] - w[e] - 0.01; break;\n              case CollisionSide.Left: vx[e] = 0; x[e] = bRight + 0.01; break;\n              case CollisionSide.Top: vy[e] = 1; y[e] = bBottom; break;\n            }\n          }\n        }\n      },\n    ),\n\n    /* Move entity using velocity values */\n    sMovement: new System(\n      { cPosition, cVelocity, cPlayer },\n      (dt, comp, entities) => {\n        const { x, y } = comp.cPosition.storage;\n        const { vx, vy } = comp.cVelocity.storage;\n        const { air } = comp.cPlayer.storage;\n        const { friction, gravity } = world;\n        for (const e of entities) {\n          x[e] += vx[e] * dt;\n          y[e] += vy[e] * dt;\n          // TODO: think to move it separately, to avoid dependency with cPlayer.air\n          vx[e] *= friction;\n          vy[e] += gravity;\n        }\n      },\n    ),\n\n    /* Render frame of spritesheet by index */\n    sDrawing: new System({ cSprite, cPosition }, (_, comp, entities) => {\n      const { sprites, spriteIdx, flipped, offsetX, offsetY } = comp.cSprite.storage;\n      const { x, y } = comp.cPosition.storage;\n      for (const e of entities) {\n        const half = sprites[e].length / 2;\n        const idx = flipped[e] ? spriteIdx[e] + half : spriteIdx[e];\n        viewport.draw(\n          sprites[e][idx],\n          Math.round(offsetX[e] + x[e]),\n          Math.round(offsetY[e] + y[e]),\n        );\n      }\n    }),\n\n    /* Calculate next frame needed to draw */\n    sAnimation: new System({ cAnimation, cSprite }, (dt, comp, entities) => {\n      const { animations, current, length, time, coef } = comp.cAnimation.storage;\n      const { spriteIdx } = comp.cSprite.storage;\n      for (const e of entities) {\n        const frameTime = (time[e] + dt * coef[e]) % length[e];\n        spriteIdx[e] = animations[e][current[e]][frameTime | 0];\n        time[e] = frameTime;\n      }\n    }),\n\n    /* Listen for user input */\n    sController: new System(\n      { cVelocity, cInput, cSprite, cPlayer, cAnimation },\n      (_, comp, entities) => {\n        const { flipped } = comp.cSprite.storage;\n        const { current } = comp.cAnimation.storage;\n        const { keys } = comp.cInput.storage;\n        const { vx, vy } = comp.cVelocity.storage;\n        const { air, speed } = comp.cPlayer.storage;\n        for (const e of entities) {\n          if (!keys[e].size) {\n            current[e] = air[e] ? 2 : 0;\n            continue;\n          }\n          if (keys[e].has(\"KeyQ\"))      vx[e] -= speed[e], current[e] = 1, flipped[e] = true;\n          else if (keys[e].has(\"KeyW\")) vx[e] += speed[e], current[e] = 1, flipped[e] = false;\n          if (keys[e].has(\"KeyP\"))      !air[e] && (air[e] = true, vy[e] = -10);\n        }\n      },\n    ),\n\n    /* Listen for user input for runner mode */\n    sControllerRunner: new System(\n      { cVelocity, cInputRunner, cPlayer, cAnimation },\n      (_, comp, entities) => {\n        const { current, coef } = comp.cAnimation.storage;\n        const { actions, jumping } = comp.cInputRunner.storage;\n        const { vx, vy } = comp.cVelocity.storage;\n        const { air, speed, power } = comp.cPlayer.storage;\n        for (const e of entities) {\n          if (!actions[e].size) {\n            current[e] = air[e] ? 2 : 1;\n            coef[e] = 0.24\n            if (air[e] == false) jumping[e] = false;\n            continue;\n          }\n          if (actions[e].has(\"Jump\")) {\n            if (!jumping[e] && !air[e]) {\n              jumping[e] = true;\n              air[e] = true;\n              vy[e] = -power[e];\n            }\n          } else if (air[e] == false) jumping[e] = false;\n\n          if (actions[e].has(\"Left\"))      vx[e] -= speed[e], coef[e] = 0.12, current[e] = 1;\n          else if (actions[e].has(\"Right\")) vx[e] += speed[e], coef[e] = 0.48, current[e] = 1;\n        }\n      },\n    ),\n\n    /* Generate platforms */\n    sBuildingsRunner: new System(\n      { cPosition, cShape },\n      (dt, comp, entities) => {\n        const speed = 1.5;\n        const { x, y } = comp.cPosition.storage;\n        const { w, h } = comp.cShape.storage;\n        for (const e of entities) {\n          x[e] -= speed * dt;\n          // no replace if still visible\n          if (x[e] >= -w[e]) continue;\n          x[e] += width + w[e];\n          //const [dx, dy] = platformPlacer(x[e], y[e], w[e], h[e], e);\n          // x[e] += width + w[e] + dx;\n          // y[e] += dy;\n        }\n      }\n    ),\n  };\n}\n","export class World {\n  readonly width: number;\n  readonly height: number;\n  public gravity: number;\n  public friction: number;\n  public skyColor: number;\n  public time: number;\n\n  constructor({ width, height, gravity, friction, skyColor }) {\n    this.width = width;\n    this.height = height;\n    this.gravity = gravity;\n    this.friction = friction;\n    this.skyColor = skyColor;\n    this.time = 0;\n  }\n}\n","import { Bitmap, BitmapPallete , TileableBitmap} from \"./bitmap\";\nimport stageConfigs from \"./data/runner_stages\";\nimport { colorHelpers } from \"./utils\";\nimport { World } from \"./world\";\n\nexport type StageConfig = {\n  name: string,\n  length: number,\n  bgrows: BgRow[],\n  bgwidth: number,\n  bgfill: number,\n  fgfill: number,\n};\ntype BgRow = {\n  layout: number[],\n  colors: number[]\n  offset: number,\n  speed: number,\n};\n\ntype StageBgRow = {\n  sprite: Bitmap,\n  pallete: BitmapPallete,\n  shift: number,\n  offset: number,\n  speed: number,\n}\nexport type StageCallback = (self: Stage, next: Stage) => void;\n\nexport class Stage {\n  private static current: Stage;\n  private world: World;\n  private next: Stage;\n  private config: StageConfig;\n  private bgRows: StageBgRow[];\n  private bgFadeoutCoefs: [number, number, number];\n  private bgFadeoutTimer: NodeJS.Timeout;\n  private bgFill: number;\n  private fgFill: number;\n  private width: number;\n  private progress: number;\n  private handlers: {\n    onstart: StageCallback;\n    onfinish: StageCallback;\n  }\n  constructor(world: World, config: StageConfig, bgTiles: TileableBitmap, fgTiles: TileableBitmap) {\n    const { bgfill, fgfill, bgwidth, bgrows, length } = config;\n    this.world = world;\n    this.config = config;\n    this.bgFill = bgfill;\n    this.fgFill = fgfill;\n    this.width = bgwidth * bgTiles.twidth;\n    this.progress = length;\n    this.handlers = {\n      onstart: () => {},\n      onfinish: () => {},\n    };\n    this.bgRows = [] as StageBgRow[];\n    const speedQuickFix = 0.5; // TODO: remove, handle properly, later ofc\n    for (let i = 0; i < bgrows.length; i++) {\n      const { layout, colors, offset, speed } = bgrows[i];\n      const sprite = bgTiles.reorder(layout.concat(layout), bgwidth * 2, 1);\n      const pallete = new BitmapPallete(sprite);\n      pallete.colors = colors; \n      this.bgRows[i] = { sprite, pallete, speed: speed * speedQuickFix, shift: 0, offset: offset * sprite.theight };\n    }\n  }\n  update(dt: number) {\n    this.progress -= dt; \n    if (this.progress <= 100 && !this.bgFadeoutTimer) {\n      this.bgFadeoutTimer = setInterval(() => this.interpolateBgPallete((100 - this.progress) / 100), 100);\n    }\n    if (this.progress <= 0) {\n      this.finish();\n      this.next.start();\n      return;\n    }\n  }\n  renderBg(dt: number, viewport: Bitmap) {\n    const { width, bgRows, bgFill } = this;\n    viewport.fill(bgFill);\n    for (const row of bgRows) {\n      row.shift -= row.speed * dt;\n      if (-width >= row.shift) row.shift = 0;\n      viewport.draw(row.sprite, Math.round(row.shift), row.offset);\n    }\n  }\n  renderFg(dt: number, viewport: Bitmap) {\n\n  }\n  interpolateBgPallete(step: number) {\n    if (!this.next) return;\n    const { bgrows: sbgrows, bgfill: sbgfill } = this.config;\n    const { bgrows: dbgrows, bgfill: dbgfill } = this.next.config;\n    this.bgFill = colorHelpers.interpolate(sbgfill, dbgfill, step);\n    this.bgRows.forEach((row, i) => {\n      const spal = sbgrows[i].colors;\n      const dpal = dbgrows[i].colors;\n      const colors = spal.map((_, j) => colorHelpers.interpolate(spal[j], dpal[j], step));\n      row.pallete.colors = colors;\n    });\n  }\n  setNext(stage: Stage) {\n    this.next = stage;\n    const [_, B, G, R] = colorHelpers.calccoefs(\n      colorHelpers.hex2abgr(this.config.bgfill),\n      colorHelpers.hex2abgr(stage.config.bgfill),\n    );\n    // TODO: no need for now. interpolation is used for all rows\n    this.bgFadeoutCoefs = [B, G, R];\n  }\n  start() {\n    this.handlers.onstart(this, this.next);\n    clearInterval(this.bgFadeoutTimer);\n    console.debug(`Start: ${this.config.name}`)\n  }\n  finish() {\n    this.handlers.onfinish(this, this.next);\n    clearInterval(this.bgFadeoutTimer);\n    console.debug(`Finish: ${this.config.name}`)\n  }\n  onstart(cb: StageCallback) { this.handlers.onstart = cb; }\n  onfinish(cb: StageCallback) { this.handlers.onfinish = cb; }\n}\n\n","import { StageConfig } from \"../stage\";\n\nexport default [\n  {\n    name: \"MorningCity\", bgwidth: 10, length: 2000,\n    bgfill: 0xfff5ca75, fgfill: 0xff002200,\n    bgrows: [\n      { layout: [0,0,0,0,0,0,0,0,0,0], offset: 0.5, speed: 1.0, colors: [0x00000000, 0xffe5aa45, 0xffeac770] },\n      { layout: [0,0,0,0,0,0,0,0,0,0], offset: 0.0, speed: 2.0, colors: [0x00000000, 0xffd59a55, 0xffb57a35] },\n      { layout: [2,2,2,2,2,2,2,2,2,2], offset: 2.5, speed: 2.0, colors: [0xff556622, 0x00000000, 0x00000000] },\n      { layout: [2,2,2,2,2,2,2,2,2,2], offset: 3.0, speed: 3.0, colors: [0xff445522, 0x00000000, 0x00000000] },\n      { layout: [3,3,3,3,3,3,3,3,3,3], offset: 3.5, speed: 3.5, colors: [0xff33312e, 0x00000000, 0x00000000] },\n      { layout: [5,5,5,5,5,5,5,5,5,5], offset: 4.0, speed: 4.0, colors: [0xff222120, 0xff303030, 0x00000000] },\n    ],\n  },\n  {\n    name: \"SunsetCity\", bgwidth: 10, length: 3000,\n    bgfill: 0xff4499fd, fgfill: 0xff202122,\n    bgrows: [\n      { layout: [0,0,0,0,0,0,0,0,0,0], offset: 0.5, speed: 1.0, colors: [0x00000000, 0xff3366ee, 0xff2244aa] },\n      { layout: [0,0,0,0,0,0,0,0,0,0], offset: 0.0, speed: 2.0, colors: [0x00000000, 0xff113388, 0xff2255bb] },\n      { layout: [2,2,2,2,2,2,2,2,2,2], offset: 2.5, speed: 2.0, colors: [0xff40424b, 0x00000000, 0x00000000] },\n      { layout: [5,5,5,5,5,5,5,5,5,5], offset: 3.0, speed: 3.0, colors: [0xff303236, 0xff206090, 0x00000000] },\n      { layout: [5,5,5,5,5,5,5,5,5,5], offset: 3.5, speed: 3.5, colors: [0xff28292b, 0xff206090, 0x00000000] },\n      { layout: [5,5,5,5,5,5,5,5,5,5], offset: 4.0, speed: 4.0, colors: [0xff202122, 0xff206090, 0x00000000] },\n    ],\n  },\n  {\n    name: \"NightCity\", bgwidth: 10, length: 5000,\n    bgfill: 0xff361d20, fgfill: 0xff2b1b1b,\n    bgrows: [\n      { layout: [0,0,0,0,0,0,0,0,0,0], offset: 0.5, speed: 1.0, colors: [0x00000000, 0xff402026, 0xff6a3e4f] },\n      { layout: [0,0,0,0,0,0,0,0,0,0], offset: 0.0, speed: 2.0, colors: [0x00000000, 0xff683b46, 0xff321e1e] },\n      { layout: [4,4,5,4,4,4,5,4,3,3], offset: 2.5, speed: 2.0, colors: [0xff2b1b1b, 0x00000000, 0x00000000] },\n      { layout: [5,5,4,4,4,4,5,4,4,4], offset: 3.0, speed: 3.0, colors: [0xff2d1f1e, 0xff304090, 0x00000000] },\n      { layout: [5,5,5,5,5,5,5,5,5,5], offset: 3.5, speed: 3.5, colors: [0xff302422, 0xff5060a0, 0x00000000] },\n      { layout: [5,5,5,5,5,5,5,5,5,5], offset: 4.0, speed: 4.0, colors: [0xff362824, 0xff80a0f0, 0x00000000] },\n    ],\n  }\n] as StageConfig[];\n","import { Engine, TimeoutEngine, WindowRafEngine } from \"./engine\";\nimport { Bitmap, BitmapPallete } from \"./bitmap\";\n\nimport { EntityManager } from \"./ecs/simple.ecs\";\nimport * as components from \"./components\";\nimport { Systems } from \"./systems\";\nimport { World } from \"./world\";\nimport { Stage } from \"./stage\";\n\nimport stageConfigs from \"./data/runner_stages\";\n\nimport { fileHelpers } from \"./utils\";\n\nexport type GameConfig = {\n  width: number;\n  height: number;\n  actions: Set<string>;\n  screen: HTMLCanvasElement;\n  overlay: HTMLDivElement;\n  fps: number;\n};\n\nexport default async (config: GameConfig) => {\n  const { width, height, actions, screen, fps } = config;\n\n  // --------------------------------------------------------------------------\n  // const screenCtx = screen.getContext(\"2d\", {\n  //   alpha: false,\n  //   colorSpace: 'srgb',\n  //   willReadFrequently: true,\n  // }) as CanvasRenderingContext2D;\n  const screenCtx = screen.getContext(\"2d\") as CanvasRenderingContext2D;\n  const screenImageData = screenCtx.getImageData(0, 0, width, height) as ImageData;\n  const viewport = Bitmap.from(screenImageData.data.buffer, width, height);\n\n  // --------------------------------------------------------------------------\n  const [tilesPlayer, tilesHouses, tilesBg] = await fileHelpers.loadImagesAsTileableBitmaps(\n    [\"../assets/player.png\", 16, 16, 4, 1],\n    [\"../assets/backgrounds_houses.png\", 48, 32, 5, 1],\n    [\"../assets/backgrounds.png\", 32, 32, 6, 1],\n  );\n  const spritesPlayer = tilesPlayer.split().concat(tilesPlayer.flipV().split());\n  const spritesHouses = [\n    tilesHouses.reorder([1,0, 2,2, 0,1], 2, 3),\n    tilesHouses.reorder([2,2, 1,1, 1,1], 2, 3),\n    tilesHouses.reorder([3,4, 3,1, 2,2], 2, 3),\n    tilesHouses.reorder([2,2,2,2, 0,0,0,0], 4, 2),\n    tilesHouses.reorder([1,2,3,1, 0,2,2,0], 4, 2),\n    tilesHouses.reorder([3,4,1,4, 1,3,2,4], 4, 2),\n    tilesHouses.reorder([1,1, 1,1], 2, 2),\n    tilesHouses.reorder([3,2, 1,1], 2, 2),\n    tilesHouses.reorder([1,2,2,1, 1,2,2,1, 0,2,2,0], 4, 3),\n    tilesHouses.reorder([2,0,1,4, 2,0,1,1, 0,0,0,0], 4, 3),\n    tilesHouses.reorder([1,1, 1,1, 2,2, 3,3], 2, 4),\n    tilesHouses.reorder([2,4,3,1,2, 2,1,3,0,2, 0,0,3,0,0], 5, 3),\n    tilesHouses.reorder([0], 1, 1),\n  ]\n  const colors = [0xff101010, 0xff303030, 0];\n  const palletesHouses = spritesHouses.map(sprite => new BitmapPallete(sprite));\n  palletesHouses.forEach(p => p.colors = colors); // TODO: remove\n\n  // --------------------------------------------------------------------------\n  const world = new World({\n      width,\n      height,\n      gravity: 0.5,\n      friction: 0.75,\n      skyColor: 0xffa09080,\n  });\n  let currentStage: Stage;\n  const stages = stageConfigs.map(config => new Stage(\n    world,\n    config,\n    tilesBg,\n    tilesHouses,\n  ));\n\n  // TODO: check what should be removed\n  // TODO: make 0 - entry, 3 - morning, 4 - ending\n  stages.forEach((stage, i) => i > 0 && stages[i - 1].setNext(stage));\n  stages.forEach((stage, i) => stage.onfinish((curr, next) => {\n    currentStage = next;\n    console.debug(`Switching ${i}`);\n  }));\n  currentStage = stages[0];\n  stages[stages.length - 1].onfinish(() => {\n    window.alert(\"Дякую за увагу! Будьте щасливі!\");\n    engine.stop();\n    // console.log(\"You win!\");\n  });\n\n  // --------------------------------------------------------------------------\n  const eManager = new EntityManager(components);\n  const eSystems = Systems(world, viewport);\n  const ePlayer = eManager.add({\n    cPosition: { x: 32, y: 64 },\n    cVelocity: { vx: 0, vy: 0 },\n    cShape: { w: 10, h: 14 },\n    cPlayer: { air: true, speed: 0.8, power: 6 },\n    cInputRunner: { actions, jumping: false, acceleration: 0 },\n    cSprite: { spriteIdx: 0, sprites: spritesPlayer, offsetX: -3, offsetY: -2 },\n    cAnimation: { animations: [ [0, 0, 3, 3], [1, 2, 3, 0], [1, 1, 2, 2] ], current: 0, length: 4, time: 0, coef: 0.4 },\n  });\n  const createBuilding = (spriteIdx: number, col: number, row: number) => eManager.add({\n    cPosition: { x: col * 16, y: row * 20, },\n    cSprite: { spriteIdx, sprites: spritesHouses },\n    cShape: { w: spritesHouses[spriteIdx].width, h: spritesHouses[spriteIdx].height },\n  });\n  const eBuildings = [\n    // createBuilding(11, 0, 6),\n    createBuilding(0,  0,  5),\n    createBuilding(6,  8, 6),\n    createBuilding(1,  16, 5),\n    createBuilding(2,  24, 6),\n    createBuilding(1,  32, 6),\n    createBuilding(0,  40, 7),\n    createBuilding(7,  48, 5),\n    // createBuilding(3,  24, 6),\n  ];\n\n  // --------------------------------------------------------------------------\n  const collideBounds = eSystems.sCollideBounds.setup([ePlayer]);\n  const collideShapes = eSystems.sCollideShapes.setup([ePlayer], eBuildings);\n  const platforms = eSystems.sBuildingsRunner.setup(eBuildings);\n  const move = eSystems.sMovement.setup([ePlayer]);\n  const draw = eSystems.sDrawing.setup([ePlayer, ...eBuildings]);\n  const control = eSystems.sControllerRunner.setup([ePlayer]);\n  const animate = eSystems.sAnimation.setup([ePlayer]);\n\n  // TODO - remove, handle somewhere\n  const { x, y } = components.cPosition.storage;\n\n  // --------------------------------------------------------------------------\n  const render = (dt: number, time: number) => {\n    currentStage.renderBg(dt, viewport);\n    animate(dt);\n    draw(dt);\n    screenCtx.putImageData(screenImageData, 0, 0);\n  };\n  const update = (dt: number, time: number) => {\n    currentStage.update(dt);\n    // if (y[ePlayer] > 200) { // reset player\n    //   x[ePlayer] = 32;\n    //   y[ePlayer] = 64;\n    // }\n    platforms(dt),\n    move(dt);\n    collideBounds(dt);\n    collideShapes(dt);\n    control(dt);\n  };\n  // --------------------------------------------------------------------------\n  // const engine = new Engine(fps, update, render, 60 / 1000);\n  // const engine = new TimeoutEngine(fps, update, render, 60 / 1000);\n  const engine = new WindowRafEngine(fps, update, render, 60 / 1000);\n\n  return { engine }\n}\n","import runnerGame from \"./runnerGame\";\n\nexport const debug: any = {};\n\nwindow.addEventListener(\"load\", async () => {\n  const debugEl = document.getElementById(\"debug\") as HTMLDivElement;\n  debug.set = (...msg: string[]) => (debugEl.innerHTML = msg.join(\", \"));\n  debug.add = (...msg: string[]) => (debugEl.innerHTML += \"<br>\" + msg.join(\", \"));\n\n  const width = 320;\n  const height = 160;\n\n  console.log(document);\n  const screen = document.getElementById(\"screen\") as HTMLCanvasElement;\n  const overlay = document.getElementById(\"overlay\") as any;\n  overlay.set = (...msg: string[]) => (debugEl.innerHTML = msg.join(\"<br>\"));\n  overlay.add = (...msg: string[]) => (debugEl.innerHTML += msg.join(\"<br>\"));\n  const buttons = [\n    document.getElementById(\"btn-left\"),\n    document.getElementById(\"btn-right\"),\n    document.getElementById(\"btn-jump\"),\n  ];\n\n  screen.width = width;\n  screen.height = height;\n\n  const actions: Set<string> = new Set();\n  const actionsMapping = {\n    KeyQ: \"Left\", KeyW: \"Right\", KeyP: \"Jump\",\n    KeyA: \"Left\", KeyD: \"Right\", Space: \"Jump\",\n    ArrowLeft: \"Left\", ArrowRight: \"Right\", ArrowUp: \"Jump\",\n    \"btn-left\": \"Left\", \"btn-right\": \"Right\", \"btn-jump\": \"Jump\",\n  };\n  window.addEventListener(\"keydown\", ({ code }) => actionsMapping[code] && actions.add(actionsMapping[code]));\n  window.addEventListener(\"keyup\", ({ code }) => actionsMapping[code] && actions.delete(actionsMapping[code]));\n  for (const btn of buttons) {\n    btn.addEventListener(\"touchstart\", ({ target: { id } }: any) => actionsMapping[id] && actions.add(actionsMapping[id]))\n    btn.addEventListener(\"touchend\", ({ target: { id } }: any) => actionsMapping[id] && actions.delete(actionsMapping[id]))\n    btn.addEventListener(\"mousedown\", ({ target: { id } }: any) => actionsMapping[id] && actions.add(actionsMapping[id]))\n    btn.addEventListener(\"mouseup\", ({ target: { id } }: any) => actionsMapping[id] && actions.delete(actionsMapping[id]))\n  };\n\n  const game = await runnerGame({ screen, overlay, width, height, actions, fps: 1000/60 });\n  game.engine.start();\n  console.log(\"INITIALIZED\");\n});\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","CollisionSide","width","height","this","data","Uint32Array","from","buffer","bitmap","Bitmap","draw","x","y","dest","dw","dh","src","sw","i","length","px","py","copy","sx","sy","j","extract","sh","clone","fill","color","flipV","pi","temp","flipH","twidth","theight","cols","rows","tbitmap","TileableBitmap","extractTile","col","row","copyTile","split","bitmaps","push","reorder","order","scols","dc","dr","sc","sr","pixels","map","colors","pixel","idx","indexOf","palleteMap","Uint8Array","palleteData","Array","pallete","set","slice","remap","fileHelpers","loadImage","Promise","resolve","reject","image","Image","onload","canvas","document","createElement","context","getContext","drawImage","imageData","getImageData","onerror","err","console","error","loadImageAsBitmap","then","img","catch","loadImagesAsTileableBitmaps","all","configs","w","h","c","r","ArrayBuffer","colorHelpers","hex2abgr","hex","abgr2hex","hexadjust","A","B","G","R","a","b","g","Math","min","calccoefs","colora","colorb","K","interpolate","hexa","hexb","step","timeHelpers","performance","now","rate","update","render","deltaCoef","timestamp","running","start","tick","stop","isRunning","getTimestamp","dt","time","ms","setTimeout","Engine","window","requestAnimationFrame","components","add","entries","componentName","component","result","reset","values","schema","storage","keys","reduce","acc","element","handler","setup","entityGroups","debug","cPosition","Component","cVelocity","vx","vy","cShape","cSprite","spriteIdx","sprites","flipped","offsetX","offsetY","cAnimation","animations","current","coef","cInput","Set","cInputRunner","actions","jumping","acceleration","cPlayer","air","speed","power","c2AnimatedBg","rectangle","x0","y0","r0","b0","x1","y1","r1","b1","None","Left","Right","Top","Bottom","bounds","bl","bt","br","bb","gravity","friction","skyColor","world","config","bgTiles","fgTiles","bgfill","fgfill","bgwidth","bgrows","bgFill","fgFill","progress","handlers","onstart","onfinish","bgRows","layout","offset","sprite","concat","BitmapPallete","shift","bgFadeoutTimer","setInterval","interpolateBgPallete","finish","next","renderBg","viewport","round","renderFg","sbgrows","sbgfill","dbgrows","dbgfill","forEach","spal","dpal","_","setNext","stage","bgFadeoutCoefs","clearInterval","name","cb","screen","fps","screenCtx","screenImageData","tilesPlayer","tilesHouses","tilesBg","spritesPlayer","spritesHouses","p","World","stages","Stage","curr","currentStage","alert","engine","eManager","EntityManager","eSystems","sCollideBounds","System","comp","entities","e","eRight","eBottom","collisionSide","sCollideShapes","blocks","totalCollisions","bRight","bBottom","sMovement","sDrawing","half","sAnimation","frameTime","sController","size","has","sControllerRunner","sBuildingsRunner","Systems","ePlayer","eBuildings","createBuilding","collideBounds","collideShapes","platforms","move","control","animate","WindowRafEngine","putImageData","addEventListener","debugEl","getElementById","innerHTML","msg","join","log","overlay","buttons","actionsMapping","KeyQ","KeyW","KeyP","KeyA","KeyD","Space","ArrowLeft","ArrowRight","ArrowUp","code","delete","btn","id","runnerGame"],"sourceRoot":""}